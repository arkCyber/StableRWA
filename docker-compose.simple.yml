# =====================================================================================
# File: docker-compose.simple.yml
# Description: Simplified Docker Compose for StableRWA Platform Testing
# Author: arkSong (arksong2018@gmail.com)
# Framework: StableRWA - Enterprise RWA Tokenization Technology Framework Platform
# =====================================================================================

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stablerwa-postgres
    environment:
      POSTGRES_DB: stablerwa
      POSTGRES_USER: stablerwa
      POSTGRES_PASSWORD: StableRWA2024!
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stablerwa -d stablerwa"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - stablerwa-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stablerwa-redis
    command: redis-server --appendonly yes --requirepass StableRWA2024!
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - stablerwa-network
    restart: unless-stopped

  # Ganache Blockchain
  ganache:
    image: trufflesuite/ganache:latest
    container_name: stablerwa-ganache
    ports:
      - "8545:8545"
    command: >
      ganache
      --host 0.0.0.0
      --port 8545
      --networkId 1337
      --chainId 1337
      --accounts 10
      --deterministic
      --mnemonic "test test test test test test test test test test test junk"
      --gasLimit 12000000
      --gasPrice 1000000000
    networks:
      - stablerwa-network
    restart: unless-stopped

  # MinIO S3-compatible Storage
  minio:
    image: minio/minio:latest
    container_name: stablerwa-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: stablerwa
      MINIO_ROOT_PASSWORD: StableRWA2024!
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - stablerwa-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: stablerwa-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - stablerwa-network
    restart: unless-stopped

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stablerwa-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: StableRWA2024!
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - stablerwa-network
    restart: unless-stopped

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: stablerwa-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - stablerwa-network
    restart: unless-stopped

networks:
  stablerwa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
