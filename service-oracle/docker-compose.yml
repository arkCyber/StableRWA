# =====================================================================================
# RWA Tokenization Platform - Oracle Service Docker Compose
# 
# Author: arkSong (arksong2018@gmail.com)
# =====================================================================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oracle-postgres
    environment:
      POSTGRES_DB: oracle_service
      POSTGRES_USER: oracle_user
      POSTGRES_PASSWORD: oracle_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - oracle-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oracle_user -d oracle_service"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oracle-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - oracle-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Oracle Service
  oracle-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oracle-service
    environment:
      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8081
      SERVER_WORKERS: 4
      
      # Database configuration
      DATABASE_URL: postgresql://oracle_user:oracle_password@postgres:5432/oracle_service
      DATABASE_MAX_CONNECTIONS: 10
      DATABASE_MIN_CONNECTIONS: 1
      
      # Redis configuration
      REDIS_URL: redis://redis:6379
      
      # Security
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-min-32-chars
      
      # Provider API keys (set these in production)
      # COINGECKO_API_KEY: your-coingecko-api-key
      # COINMARKETCAP_API_KEY: your-coinmarketcap-api-key
      
      # Logging
      RUST_LOG: info
      RUST_BACKTRACE: 1
      
    ports:
      - "8081:8081"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - oracle-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: oracle-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - oracle-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: oracle-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - oracle-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx (Optional - for load balancing and SSL termination)
  nginx:
    image: nginx:alpine
    container_name: oracle-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - oracle-network
    depends_on:
      - oracle-service
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  oracle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
